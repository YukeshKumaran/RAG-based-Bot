import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv
import json

# Load API key
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def get_pdf_text(pdf_docs):
    """Extract text from uploaded PDFs."""
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            if page.extract_text():
                text += page.extract_text()
    return text

def get_text_chunks(text):
    """Split the extracted text into smaller chunks for better retrieval."""
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    return text_splitter.split_text(text)

def get_vector_store(text_chunks):
    """Convert text chunks into embeddings and store in FAISS index."""
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")

def validate_question_relevance(question, context):
    """Use Gemini AI to validate if the question is related to the document."""
    model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)

    validation_prompt = f"""
    Here is a document excerpt:
    {context}

    Here is a user question:
    {question}

    If the question is directly related to the document, respond with only "True".
    If the question is not related to the document, respond with only "False".
    """

    response = model.predict(validation_prompt).strip()

    return response == "True"

def get_conversational_chain():
    """Create a conversational chain with a structured prompt template."""
    prompt_template = """
    Answer the question using the provided context if available. 
    If the answer is not found in the context, generate a response based on your general knowledge.\n\n
    Context:\n {context}\n
    Question:\n {question}\n
    Answer:
    """
    model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    return load_qa_chain(model, chain_type="stuff", prompt=prompt)

def user_input(user_question):
    """Handles user queries and retrieves answers from PDFs or Gemini AI."""
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

    # Load FAISS database
    try:
        new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
        docs = new_db.similarity_search(user_question)
    except:
        docs = []  # No FAISS index found

    # Extract relevant document context (if available)
    document_context = "\n".join([doc.page_content for doc in docs]) if docs else ""

    if document_context and validate_question_relevance(user_question, document_context):  
        # If question matches document context, use RAG-based answering
        chain = get_conversational_chain()
        response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)
        answer = response["output_text"]
    else:
        # If no match, fall back to general Gemini AI
        model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)
        answer = model.invoke(user_question)
        print("="*20)
        print(type(answer))
        # answer = json.loads(answer)["content"]
        print("="*20)

    st.write("Reply: ", answer)

def main():
    """Streamlit UI setup and main application logic."""
    st.set_page_config(page_title="Chat PDF")
    st.header("Interactive RAG-based LLM for Multi-PDF Document Analysis", divider='rainbow')

    user_question = st.text_input("Ask a Question from the PDF Files or General Knowledge")

    if user_question:
        user_input(user_question)

    with st.sidebar:
        st.title("Menu:")
        pdf_docs = st.file_uploader("Upload your PDF Files and Click on the Submit & Process Button", accept_multiple_files=True)
        if st.button("Submit & Process"):
            with st.spinner("Processing..."):
                raw_text = get_pdf_text(pdf_docs)
                if raw_text:
                    text_chunks = get_text_chunks(raw_text)
                    get_vector_store(text_chunks)
                    st.success("Processing Complete! You can now ask questions.")
                else:
                    st.error("No text extracted from PDFs. Please upload valid files.")

if _name_ == "_main_":
    main()
